---
name: "Elixir CI"

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

env:
  MIX_ENV: "test"

permissions:
  contents: "read"

jobs:
  test:
    # Set up a Postgres DB service. By default, Phoenix applications
    # use Postgres. This creates a database for running tests.
    services:
      db:
        image: "postgres:15.5"
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "postgres"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: "ubuntu-latest"
    name: "OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}"
    strategy:
      matrix:
        otp:
          # - "25.3"
          - "26.2"
        elixir:
          - "1.16.0"

    steps:
      # Step: Setup Elixir + Erlang image as the base.
      - name: "Set up Elixir"
        uses: "erlef/setup-beam@v1"
        with:
          otp-version: "${{matrix.otp}}"
          elixir-version: "${{matrix.elixir}}"

      # Step: Check out the code.
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      # Step: Define how to cache deps. Restores existing cache if present.
      - name: "Cache deps"
        id: "cache-deps"
        uses: "actions/cache@v3"
        env:
          cache-name: "cache-elixir-deps"
        with:
          path: "deps"
          key: "${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-mix-${{env.cache-name}}-${{hashFiles('**/mix.lock')}}"
          restore-keys: |
            ${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-mix-${{env.cache-name}}-${{hashFiles('**/mix.lock')}}
            ${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-mix-${{env.cache-name}}-

      # Step: Define how to cache the `_build` directory. After the first run,
      # this speeds up tests runs a lot. This includes not re-compiling our
      # project's downloaded deps every run.
      - name: "Cache compiled build"
        id: "cache-build"
        uses: "actions/cache@v3"
        env:
          cache-name: "cache-compiled-build"
        with:
          path: "_build"
          key: "${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-mix-${{env.cache-name}}-${{hashFiles('**/mix.lock')}}"
          restore-keys: |
            ${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-mix-${{env.cache-name}}-${{hashFiles('**/mix.lock')}}
            ${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-mix-${{env.cache-name}}-

      # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
      # Cache key based on Elixir & Erlang version (also useful when running in matrix)
      - name: "Restore PLT cache"
        id: "cache-plt"
        uses: "actions/cache@v3"
        env:
          cache-name: "cache-plt"
        with:
          path: "priv/plts"
          key: "${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-plts-${{env.cache-name}}-${{hashFiles('/mix.lock')}}-${{hashFiles('**/*.ex')}}"
          restore-keys: |
            ${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-plts-${{env.cache-name}}-${{hashFiles('/mix.lock')}}-${{hashFiles('**/*.ex')}}
            ${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-plts-${{env.cache-name}}-${{hashFiles('/mix.lock')}}-
            ${{runner.os}}-${{matrix.otp}}-${{matrix.elixir}}-plts-${{env.cache-name}}-

      # Step: Conditionally bust the cache when job is re-run.
      # Sometimes, we may have issues with incremental builds that are fixed by
      # doing a full recompile. In order to not waste dev time on such trivial
      # issues (while also reaping the time savings of incremental builds for
      # *most* day-to-day development), force a full recompile only on builds
      # that are retried.
      - name: "Clean to rule out incremental build as a source of flakiness"
        if: github.run_attempt != '1'
        run: |
          mix deps.clean --all
          mix clean

      # Step: Download project dependencies. If unchanged, uses
      # the cached version.
      - name: "Install dependencies"
        run: |
          mix deps.get

      # Step: Compile the project treating any warnings as errors.
      - name: "Compiles without warnings"
        run: "mix compile --warnings-as-errors"

      # Step: Check that the checked in code has already been formatted.
      # This step fails if something was found unformatted.
      - name: "Check Formatting"
        run: "mix format --check-formatted"

      # Step: Run Credo linter
      - name: "Lint with Credo"
        run: "mix credo"

      # Create PLTs if no cache was found.
      # Always rebuild PLT when a job is retried
      # If they were cached at all, they'll be updated when we run mix dialyzer with no flags.
      - name: "Create PLTs"
        if: steps.cache-plt.outputs.cache-hit != 'true' || github.run_attempt != '1'
        run: "mix dialyzer --plt"

      # Step: Run Dialyzer check
      - name: "Run dialyzer"
        run: "mix dialyzer --no-check --format github"

      # Step: Execute the tests.
      - name: "Run tests"
        run: "mix test"
        env:
          DATABASE_URL: "postgresql://postgres:postgres@db:5432/taiko_test"
...
